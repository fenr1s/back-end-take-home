// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/fenr1s/back-end-take-home/domain/models"

// Router is an autogenerated mock type for the Router type
type Router struct {
	mock.Mock
}

// BuildPath provides a mock function with given fields: prev, origin, destination, path
func (_m *Router) BuildPath(prev map[string]string, origin string, destination string, path string) string {
	ret := _m.Called(prev, origin, destination, path)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]string, string, string, string) string); ok {
		r0 = rf(prev, origin, destination, path)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FindRoutesByOrigin provides a mock function with given fields: origin, routes
func (_m *Router) FindRoutesByOrigin(origin string, routes []*models.Route) ([]*models.Route, error) {
	ret := _m.Called(origin, routes)

	var r0 []*models.Route
	if rf, ok := ret.Get(0).(func(string, []*models.Route) []*models.Route); ok {
		r0 = rf(origin, routes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Route)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []*models.Route) error); ok {
		r1 = rf(origin, routes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindShortestPath provides a mock function with given fields: origin, destination, routes
func (_m *Router) FindShortestPath(origin string, destination string, routes []*models.Route) string {
	ret := _m.Called(origin, destination, routes)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, []*models.Route) string); ok {
		r0 = rf(origin, destination, routes)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRoutes provides a mock function with given fields:
func (_m *Router) GetRoutes() ([]*models.Route, error) {
	ret := _m.Called()

	var r0 []*models.Route
	if rf, ok := ret.Get(0).(func() []*models.Route); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Route)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
